# ---
# #
# # Install/run Jenkins
# #

- set_fact: JENKINS_ADMIN_ID="{{ lookup('env','JENKINS_ADMIN_ID') }}"
- set_fact: JENKINS_ADMIN_PASSWORD="{{ lookup('env','JENKINS_ADMIN_PASSWORD') }}"
- set_fact: GIT_PRIVATE_KEY="{{ lookup('env','GIT_PRIVATE_KEY') }}"
- set_fact: GIT_SSH_USERNAME="{{ lookup('env','GIT_SSH_USERNAME') }}"


- name: Ensure directory structure exists
  ansible.builtin.file:
    path: '{{ JENKINS_HOME }}{{ item.path }}'
    state: directory
    mode: '{{ item.mode }}'
  with_community.general.filetree: templates/
  when: item.state == 'directory'

- name: Ensure JENKINS HOME directory exists
  ansible.builtin.file:
    path: '{{ JENKINS_HOME }}'
    state: directory
    mode: 0755
    force: yes

- name: Copy Jenkins config files
  copy:
    src: "{{ item }}"
    dest: "{{ JENKINS_HOME }}/{{ item }}"
    owner: centos
    group: centos
    mode: 0755
  loop:
    - ansible.cfg
    - Dockerfile
    - plugins.txt
    - inventory

- name: debugging
  debug: msg="{{ JENKINS_ADMIN_ID }}{{ DOCKER_HOST }}"

- name: Ensure files are populated from templates
  ansible.builtin.template:
    src: '{{ item.src }}'
    # Your template files should be stored with a .j2 file extension,
    # but should not be deployed with it. splitext|first removes it.
    dest: '{{ JENKINS_HOME }}{{ item.path | splitext | first }}'
    owner: centos
    group: centos
    mode: 0755
  with_community.general.filetree: templates/
  when: item.state == 'file'

####  Docker-Compose configuration  ####

- name: Tear down existing services
  docker_compose:
    project_src: '{{ JENKINS_HOME }}'
    state: absent
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Create and start services
  docker_compose:
    project_src: '{{ JENKINS_HOME }}'
  register: output
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3

- ansible.builtin.debug:
    var: output

- name: Run `docker-compose up` again
  docker_compose:
    project_src: '{{ JENKINS_HOME }}'
    build: no
  register: output
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3

- ansible.builtin.debug:
    var: output

- ansible.builtin.assert:
    that: 
      - "not output.changed"
      - "output.ansible_facts.jenkins_server.JenkinsServer.state.running"
      - "output.ansible_facts.jenkins_docker.JenkinsDocker.state.running"